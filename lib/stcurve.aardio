//stcurve 1.0
import win.reg;
import com.lite;
import com.activeX;
import console;
import fsys;
namespace stcurve;
class stcurve {
	ctor( winform )
	{
		
		try{
			this = winform.createEmbed( "STCURVE.STCurveCtrl.1" );
			this.getCopyrightInfo();
		}
		catch (e) {
			process.execute("Regsvr32",io.fullpath($"\res\ocx\ST_Curve.ocx"),"runas" );
			this = winform.createEmbed( "STCURVE.STCurveCtrl.1" );
		}
	};

	/* ************************坐标间隔**************************************** */

	setVInterval = function( v )    /* 设置垂直刻度值 */
	{
		return this._object.SetVInterval( v );
	}
	setHInterval = function()       /* 设置横刻度值 */
	{
		return this._object.SetHInterval( );
	}
	getScaleInterval = function()   /* 获取坐标间隔 */
	{
		var scale = this._object.GetScaleInterval();
		if ( scale != null )
		{
			var	scale_h = (scale & 0xff00) >> 8;
			var	scale_v = (scale) & 0xff;
			return scale_h, scale_v;
		}else {
			return null, null;
		}
	}

	/* ****************************图例宽度********************************* */

	setLegendSpace = function( legendSpace )        /* 设置图例宽度 */
	{
		return this._object.SetLegendSpace( legendSpace );
	}
	getLegendSpace = function()                     /* 获取图例宽度 */
	{
		return this._object.GetLegendSpace();
	}

	/* ***************************纵坐标开始值***************************** */

	setBeginValue = function( fBeginValue )
	{
		return this._object.SetBeginValue( fBeginValue );
	}
	getBeginValue = function()
	{
		return this._object.getBeginValue();
	}

	/*
	 * *************************横坐标开始时间*****************************
	 * 如果需要在横坐标显示非时间的值,则需要设置显示模式,使用SetShowMode函数
	 */

	setBeginTime = function( pBeginTime )   /* 用字符串表达的时间，格式为当前操作系统默认的格式 */
	{
		return this._object.SetBeginTime( pBeginTime );
	}
	getBeginTime = function()   
	{
		return this._object.GetBeginTime(); /*返回字符串类型*/
	}
	setBeginTime2 = function( fBeginTime )  /* 用浮点数表达的时间 */
	{
		return this._object.SetBeginTime( fBeginTime );
	}
	getBeginTime2 = function()  
	{
		return this._object.GetBeginTime();  /*返回DATE类型*/
	}
	
	/*
	**************************横坐标刻度步长******************************
	*/
	setTimeSpan = function( timStep )  //单位:天,如果是值模式的直接当成double处理
	{
		return this._object.SetTimeSpan( timStep );
	}
	getTimeSpan = function()   
	{
		return this._object.GetTimeSpan(); 
	}
	/*
	**************************纵坐标刻度步长******************************
	*/
	setValueStep = function( valueStep )  
	{
		return this._object.SetValueStep( valueStep );
	}
	getValueStep = function()   
	{
		return this._object.GetValueStep(); 
	}
	/*
	**************************纵坐标刻显示精度******************************
	*/
	setVPrecision = function( precision )  /*需要小于等于6*/
	{
		return this._object.SetVPrecision( precision );
	}
	getVPrecision = function()   
	{
		return this._object.GetVPrecision(); 
	}
	/*
	**************************坐标单位******************************
	*/
	setUnit = function( pUnit )  /*需要小于等于6*/
	{
		return this._object.SetUnit( pUnit );
	}
	getUnit = function()   
	{
		return this._object.GetUnit(); 
	}
	setHUnit = function( pHUnit )  /*当显示为值的时候有用，为时间，则该值无效,显示为“时间”。*/
	{
		return this._object.SetHUnit( pHUnit );
	}
	getHUnit = function()   
	{
		return this._object.GetHUnit(); 
	}
	/*
	**************************图例相关*****************************
	*/
	
	addLegend = function(address,pSign,penColor,penStyle,lineWidth,brushColor,brushStyle,
						 curveMode,nodeMode,mask,bUpdate)
	{
		return this._object.AddLegend(address,pSign,penColor,penStyle,
				lineWidth,brushColor,brushStyle,
				curveMode,nodeMode,mask,bUpdate);
	}
	addLegendHelper = function(address,pSign,penColor,penStyle,lineWidth,bUpdate)
	{
		return this._object.AddLegendHelper( address,pSign,penColor,penStyle,lineWidth,bUpdate);
	}
	isLegend  = function(pSign)   //判断图例是否存在
	{   
		return this._object.IsLegend(pSign);
	}
	/*
	ToDo
	获取图例所有属性
	BOOL GetLegend(LPCTSTR pSign, OLE_COLOR* pPenColor, short* pPenStyle,
		short* pLineWidth, OLE_COLOR* pBrushColor,
		short* pBrushStyle, short* pCurveMode,
		short* pNodeMode);

	*/
	delLegend = function(dddress,  bAll,  bUpdate){
		 return this._object.DelLegend( dddress,  bAll,  bUpdate);
	}
	delLegend2 = function(pSign,bUpdate){
		 return this._object.DelLegend2( pSign,  bUpdate);
	}
	/*
	**************************坐标点控制*****************************
	*/
	setXYFormat  =function(pSign,xShow,yShow,hiddenUnits,singleLine)
	{
		var format = 0x00;
		if(xShow){
			format = format|(2#0001);
		}
		if(yShow){
			format = format|(2#0010);
		}
		if(hiddenUnits){
			format = format|(2#0100);
		}
		if(singleLine){
			format = format|(2#1000);	
		}
		return this._object.SetXYFormat( pSign,  format);
	}
	getXYFormatBypSign=function(pSign){
		return this._object.GetXYFormat( pSign);
	}
	getXYFormatBynIndex=function(nIndex){
		return this._object.GetXYFormat( nIndex);
	}
	/*
	**************************添加坐标点*****************************
	*/
	/*
	drawNow－是否马上绘制添加的点（绘制实时曲线）
	keepY－保持纵坐标不变（在第1位为1的情况下有效）
	keepX－保持横坐标不变（在第1位为1的情况下有效）
	moveLessY－在纵坐标上做最少的移动（在第1位为1的情况下有）
	moveLessX－在横坐标上做最少的移动（在第1位为1的情况下有）
	*/

	getVisibleStateVal=function(drawNow,keepY,keepX,moveLessY,moveLessX,autoMove){
		var visibleStateVal = 0x00;
		if(drawNow){
			visibleStateVal |=0x01; 
		}
		if(keepY){
			visibleStateVal |=(0x01<<1); 
		}
		if(keepX){
			visibleStateVal |=(0x01<<2); 
		}
		if(moveLessY){
			visibleStateVal |=(0x01<<3); 
		}
		if(moveLessX){
			visibleStateVal |=(0x01<<4); 
		}
		if(autoMove){
			visibleStateVal |=(0x01<<5); 
		}
		return visibleStateVal; 
	}
	//输入时间为字符串
	addMainData = function(address,  pTime,  Value,  State,visibleState,  bAddTrail)
	{
		return  this._object.AddMainData( address,  pTime,  Value,  State,visibleState,  bAddTrail);
	}
	//输入时间为data
	addMainData2 = function(address,  time,  value,  state,visibleState,  bAddTrail)
	{
		return  this._object.AddMainData2( address,  time,  value,  state,visibleState,  bAddTrail);
	}
	//批量添加数据
	addMemMainData = function(pMemMainData,  memSize,  bAddTrail)
	{
		return  this._object.AddMemMainData( pMemMainData,  memSize,  bAddTrail);
	}
	/*
	**************************删除坐标点*****************************
	*/
	/*DelRange删除指定时间段内的曲线*/
	delRange = function(address,  bTime,  eTime,  bAll,  bUpdate)
	{
		var mask = 2#11;
		if(bTime==null){
			mask = mask&(2#10);
		}
		if(eTime==null){
			mask = mask&(2#01);
		}
		return  this._object.DelRange( address,  bTime,  eTime, mask,  bAll,  bUpdate);
	}
	/*
	删除曲线从nInde开始的nCount个点，nCount必需大于0，或者等于-1，此时将从nIndex开始删除到曲线尾。
	*/
	delRange2 = function(address,  nIndex,  nCount,  bAll,  bUpdate)
	{
		return  this._object.DelRange(  address,  nIndex,  nCount,  bAll,  bUpdate);
	}
	/* *****************************************翻页控制****************************** */
	firstPage = function(bLast,  bUpdate){   //翻页，如果bLast为真，则跳到末页，否则跳到首页。
		return  this._object.FirstPage( bLast,  bUpdate);
	}
	gotoPage = function(bLast,  bUpdate){   //翻页到指定页,如果指定页没有曲线则直到翻到有曲线为止
		return  this._object.GotoPage( relativePage,  bUpdate);
	}
	
	/* ***********************************放大率*************************** */
	setZoom  = function(zoom){   //普通放大率设置
		return  this._object.SetZoom( zoom);
	}
	getZoom  = function(){
		return  this._object.GetZoom( );
	}
	setHZoom  = function(zoom){   //水平放大率设置
		return  this._object.SetHZoom( zoom);
	}
	getHZoom  = function(){
		return  this._object.GetHZoom( );
	}
	/* *********************************曲线点数************************* */
	
	/*
	MaxLength取值为-1表示不限制最大点（此时CutLength无效）
	CutLength为当曲线中的点超过MaxLength时，截掉曲线前面点的个数。
	*/
	setMaxLength = function(maxLength,  cutLength){
		 return  this._object.SetMaxLength(maxLength,cutLength);
	}
	getMaxLength = function(){
		 return  this._object.GetMaxLength();
	}
	getCutLength = function(){
		 return  this._object.GetCutLength();
	}
	GetCurveLength = function(address){
		 return  this._object.GetCurveLength(address);
	}
	/* ****************************显示模式设置****s************* */
	/*xy
	0－Y轴向上，X轴向右，原点在左下角（默认）；
	1－Y轴向上，X轴向左，原点在右下角；
	2－Y轴向下，X轴向右，原点在左上角；
	3－Y轴向下，X轴向左，原点在右上角。

	*/
	//Y轴向上，X轴向右，原点在左下角--
	setShowMode = function(xy,xValMode,ymdShow,hmsShow)
	{
		var showMode = 0x00;
		if(xy){
			showMode |= (xy&(2#00000011));
		}
		if(xValMode){
			showMode |= 0x80;
		}else {
			if(!ymdShow){
			showMode |= 2#0100;
			}
			if(!ymdShow){
				hmsShow |= 2#1000;
			}
		}
		
		
		return  this._object.SetShowMode( showMode);
	}
	getShowMode = function(){
		return  this._object.GetShowMode( );
	}
	setMoveMode = function(moveMode){
		return  this._object.SetMoveMode( moveMode);
	}
	/* ****************************移动模式***************** */
	getMoveMode = function(){
		return  this._object.GetMoveMode();
	}
	setFont = function(hFont){
		return  this._object.SetFont( hFont);
	}
	getFont = function(){
		return  this._object.GetFont( );
	}

/*  ***************************************曲线修正************************************ */
 	trimCoor = function(){   //手动修正
		return  this._object.TrimCoor();
	}
	
	enableAutoTrimCoor = function(bEnable){  //自动修正
		return  this._object.EnableAutoTrimCoor(bEnable);
	}
/*修剪曲线
long TrimCurve(long Address, short State, long nBegin, long nCount,short nStep, BOOL bAll);
long TrimCurve2(long Address, short State, DATE BTime, DATE ETime,short Mask, short nStep, BOOL bAll) 
*/
/*打印曲线
short PrintCurve(long Address, DATE BTime, DATE ETime, short Mask,
short LeftMargin,short TopMargin,short RightMargin,short BottomMargin,
LPCTSTR pTitle, LPCTSTR pFootNote, short Flag, BOOL bAll);
*/
	//获取坐标刻度个数，注意不包括第一个
 	getScaleNums = function(){
 		return  this._object.GetScaleNums();
 	}
 	//请求报告页数信息
 	reportPageInfo = function(){
 		return  this._object.ReportPageInfo();
 	}
 	//显示、隐藏指定的图例，或者曲线。
 	showLegend = function(pSign,  bShow){
 		return  this._object.ShowLegend( pSign,  bShow);
 	}
 	showCurve = function(address,  bShow){
 		return  this._object.ShowCurve( address,  bShow);
 	}
 	//选中曲线或者取消选中曲线。不管是选中还是取消，如果曲线处于隐藏状态，则本函数会将其更改为显示状态。
 	selectCurve = function(address,  bSelect){
 		return  this._object.SelectCurve( address,  bSelect);
 	}
	//拖动曲线，模拟用鼠标拖动曲线的效果，xStep大于0时曲线右移，yStep大于0时曲线上移，
	//返回值从低位起，如果第一位为1，则在水平轴上移动过曲线，如果第二位为1，则在垂直轴上移动过曲线。
	dragCurve = function(xStep,  yStep,  bUpdate){
 		return  this._object.DragCurve( xStep,  yStep,  bUpdate);
 	}
 	//按指定的曲线为中心垂直移动曲线，让Address处于屏幕中间
 	vCenterCurve = function(address, bUpdate){
 		return  this._object.VCenterCurve(address, bUpdate);
 	}
 	//获取当前选中的曲线  穿进去的是指针
 	getSelectedCurve = function(pAddress){
 		this._object.GetSelectedCurve(pAddress);
 	}
 	//跳转到指定曲线的开始值
 	gotoCurve = function(address){
 		return  this._object.GotoCurve(address);
 	}
 	//判断曲线是否处于选中状态。
 	isSelected = function(address){
 		return  this._object.IsSelected(address);
 	}
 	//判断图例是否处于可见状态。
 	isLegendVisible = function(){
 		IsLegendVisible( pSign);
 	}
 	//判断曲线是否可显示（可显示不一定就是可见，这	要看它在当前页上有没有显示，这用IsCurveInCanvas来判断）。
 	isCurveVisible =function(address){
 		return  this._object.IsCurveVisible(address)
 	}
 	//判断曲线是否在画布上有显示。
 	isCurveInCanvas = function(address){
 		return  this._object.IsCurveInCanvas(address); 
 	}
 	//判断曲线是否封闭（屏幕坐标相同，非实际坐标）。
 	isCurveClosed = function(address){
 		return  this._object.IsCurveClosed(address); 
 	}

  //是否允许缩放曲线
 enableZoom = function(bEnable){
 	 return  this._object.EnableZoom( bEnable);
 }
 //是否允许水平缩放
  enableHZoom = function(bEnable){
 	 return  this._object.EnableHZoom( bEnable);
 }
 //设置显示精度	 当横坐标显示为值得时候有效
 setHPrecision = function(precision){
 	return  this._object.SetHPrecision(precision);
 }
 //获取显示精度
 getHPrecision = function(){
	return  this._object.GetHPrecision();	
 }
 //查询指定曲线在整个曲线链表里面的位置，从0开始。更改曲线的位置，可以达到更改曲线的层次，就像Z-Order差不多
  getCurveIndex = function(address){
  	return  this._object.GetCurveIndex( address);
  }
  //设置指定曲线在整个曲线链表里面的位置
  setCurveIndex = function(address,nIndex){
  	return  this._object.SetCurveIndex( address,nIndex);
  }
  //获取网格显示方式
  getGridMode = function()
  {
 	return  this._object.GetGridMode();
  }
  //设置网格显示方式
  setGridMode = function(gridShowH,gridShowV,solidLine)
  {
    var mode =0;
    if(gridShowH){
    	mode |= (2#001);
    }
     if(gridShowV){
    	mode |= (2#010);
    }
     if(solidLine){
    	mode |= (2#100);
    }
 	return  this._object.SetGridMode(mode);
  }
  //设置曲线脚注
  setFootNote =function(pFootNote){
  	this._object.SetFootNote( pFootNote);
  }
  //获取曲线脚注
  getFootNote =function(){
  	return  this._object.GetFootNote( );
  }
  //是否允许自动更改Z-Order
  enableAdjustZOrder = function(bEnable){
  	 this._object.EnableAdjustZOrder( bEnable);
  }
  //获取版权信息
  getCopyrightInfo = function(){
  	 return this._object.GetCopyrightInfo();
  }
  //帮助信息显示控制
  enableHelpTip  = function(bEnable){
  	return this._object.EnableHelpTip( bEnable);
  }
  enableFocusState = function(bEnable){
  	this._object.EnableFocusState(bEnable);
  }

  //设置填充方向
  setFillDirection = function(address, down,right,up,left,  bUpdate){
    var fillDirection=2#0000; 
    if(down){
    	fillDirection|=	2#0001;
    } 
    if(right){
    	fillDirection|=	2#0010;
    } 
    if(up){
    	fillDirection|=	2#0100;
    } 
    if(left){
    	fillDirection|=	2#1000;
    } 
  	return this._object.SetFillDirection(address, fillDirection,  bUpdate)
  }
  //获取填充方向,要填充，还要图例的支持，如果图例指示不填充，则这个设置无效
  getFillDirection = function(address){
     var fillDirection = this._object.GetFillDirection(address);
     var down,right,up,left;
     down 	= 	fillDirection&2#0001;
     right 	= 	fillDirection&2#0010;
     up 	= 	fillDirection&2#0100;
     left 	= 	fillDirection&2#1000;
  	return down,right,up,left;
  }
/*
  long CheckUpdate(BSTR* pHomePage, BSTR* pVersion, BSTR* pModifyTime);
  检测控件是否有更新
*/
//设置坐标显示范围,默认显示所有坐标值
  setVisibleCoorRange = function(minTime,maxTime,minValue,maxValue)
  {
    var mask = 0;
    if(minTime!=null){
    	mask|=2#0001;	
    }
    if(maxTime!=null){
    	mask|=2#0010;	
    }
    if(minValue!=null){
    	mask|=2#0100;	
    }
    if(maxValue!=null){
    	mask|=2#1000;	
    }
  	return this._object.SetVisibleCoorRange(minTime,maxTime,minValue,maxValue,mask);
  }
 
	//变更曲线地址
	changeAddress = function(address,  newAddr){
		return this._object.ChangeAddress( address,  newAddr);
	}
	//复制一条曲线，从Address复制到NewAddr，复制结束后不会删除Address曲线。
 	cloneCurve = function(){
 	 	return this._object.CloneCurve(address,  newAddr);
 	}
	//清除控件内部使用的缓存
	clearTempBuff  =function(){
	this._object.ClearTempBuff();
	}
	//为曲线预分配空间，size指的是点的个数
	preMallocMem = function(address,  size){
	return this._object.PreMallocMem(address,  size);
	}
	//返回指定曲线所分配的缓存
	getMemSize = function(address){
	return this._object.GetMemSize(address);
	}
	/*获取缓存详细信息
	void GetMemInfo(long FAR* pTempBuffSize, long FAR* pAllBuffSize,
	float FAR* pUseRate, long FAR* pAddress);
	*/
	//查看Address是不是一条曲线
	isCurve = function(address){
		return this._object.IsCurve(address);
	}
	//设置吸附效应
	setSorptionRange = function(range){
		return this._object.SetSorptionRange(range);
	}
	//获取吸附点范围
	getSorptionRange = function(){
		return this._object.GetSorptionRange();
	}
	//全屏控件，这里的全屏，意思是将控件的全部窗口用于绘制曲线，标题、坐标、图例这些统统隐藏。
	enableFullScreen = function(bEnable){
		return this._object.EnableFullScreen(bEnable); 
	}
	//限制曲线在一页之内 
	limitOnePage = function(bLimit){
		this._object.LimitOnePage(bLimit);
	}
	//复位控件
	 refreshLimitedOrFixedCoor = function(){
	 	return this._object.RefreshLimitedOrFixedCoor();
	 }
	 //显示或者隐藏全局位置预览窗口
	 enablePreview = function(bEnable){
	 	return this._object.EnablePreview( bEnable);; 
	 };
	 //设置水印内容
	 setWaterMark = function(pWaterMark){
	 	return this._object.SetWaterMark( pWaterMark);
	 }
	 // 获取Enable系列函数设置的状态
	 getSysState = function(){
	 	return this._object.GetSysState();
	 }
	 //绘制平滑曲线的张力，如果张力等于0，就是折线图了
	 SetTension = function(tension){
	   this._object. SetTension( tension);
	 }
	 //获取曲线张力
	 getTension = function(){
	   return this._object.GetTension( );
	 } 
	 //开启禁止快捷键
	 setShortcutKeyMask = function(shortcutKey){
	 	 this._object.SetShortcutKeyMask(shortcutKey);
	 }
	 /*获取快捷键是否启用从低位起，为1表示开启
	1 -F4  2 -F5  3 -F6  4 -F7  5 -home/page up/page down/end
	6 -上下方向键 7 -左右方向键 8 -数字1键 9 -数字2键...16-数字9键*/

	 getShortcutKeyMask = function(){
	 	 return this._object.GetShortcutKeyMask();
	 }
	 //设置横坐标与窗口底部的距离  行为单位
	  setBottomSpace = function(space){
	  	 return this._object.SetBottomSpace(space);	
	  }
	 //获取横坐标与窗口底部的距离  行为单位
	 getBottomSpace = function(){
	  	 return this._object.GetBottomSpace();	
	  }
	  //获取事件开关状态
	  getEventMask = function(){
	  	return this._object.GetEventMask();
	  }
	  //设置事件开关
	 setEventMask = function(event){
	 	return this._object.SetEventMask(event);
	 }
	// 刷新曲线
 	refresh = function(){
 		return this._object.Refresh();
 	}
}	
	
/**intellisense()


end intellisense**/
	